generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(cuid())
  email                   String           @unique
  passwordHash            String
  displayName             String
  avatarUrl               String?
  lat                     Float?
  lng                     Float?
  radiusKmDefault         Int              @default(10)
  isOnline                Boolean          @default(false)
  inCall                  Boolean          @default(false)
  createdAt               DateTime         @default(now())
  posts                   Post[]
  likes                   Like[]
  comments                Comment[]
  blocks                  Block[]          @relation("UserBlocks")
  blockedBy               Block[]          @relation("BlockedBy")
  pushSubs                PushSubscription[]
  messages                ChatMessage[]    @relation("UserMessages")
  callLogsAsCaller        CallLog[]        @relation("Caller")
  callLogsAsCallee        CallLog[]        @relation("Callee")
  friendships1            Friendship[]     @relation("UserFriendships1")
  friendships2            Friendship[]     @relation("UserFriendships2")
  sentFriendRequests      FriendRequest[]  @relation("SentFriendRequests")
  receivedFriendRequests  FriendRequest[]  @relation("ReceivedFriendRequests")
  sentPrivateMessages     PrivateMessage[] @relation("SentPrivateMessages")
  receivedPrivateMessages PrivateMessage[] @relation("ReceivedPrivateMessages")
}

model Post {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  text      String
  createdAt DateTime @default(now())
}

model Block {
  id        String   @id @default(cuid())
  blocker   User     @relation("UserBlocks", fields: [blockerId], references: [id])
  blockerId String
  blocked   User     @relation("BlockedBy", fields: [blockedId], references: [id])
  blockedId String
  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model PushSubscription {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
}

model ChatRoom {
  id        String       @id @default(cuid())
  type      String
  createdAt DateTime      @default(now())
  messages  ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  room      ChatRoom @relation(fields: [roomId], references: [id])
  roomId    String
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  text      String
  createdAt DateTime @default(now())
}

model CallLog {
  id         String   @id @default(cuid())
  caller     User     @relation("Caller", fields: [callerId], references: [id])
  callerId   String
  callee     User     @relation("Callee", fields: [calleeId], references: [id])
  calleeId   String
  startedAt  DateTime @default(now())
  endedAt    DateTime?
  distanceKm Float?
}

model Friendship {
  id        String   @id @default(cuid())
  user1     User     @relation("UserFriendships1", fields: [user1Id], references: [id])
  user1Id   String
  user2     User     @relation("UserFriendships2", fields: [user2Id], references: [id])
  user2Id   String
  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
}

model FriendRequest {
  id          String   @id @default(cuid())
  sender      User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("ReceivedFriendRequests", fields: [recipientId], references: [id])
  recipientId String
  message     String?
  status      String   @default("pending") // pending, accepted, declined
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([senderId, recipientId])
}

model PrivateMessage {
  id          String   @id @default(cuid())
  sender      User     @relation("SentPrivateMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("ReceivedPrivateMessages", fields: [recipientId], references: [id])
  recipientId String
  message     String
  createdAt   DateTime @default(now())
  readAt      DateTime?
}
